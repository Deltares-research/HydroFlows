"""Module/ Rule for building FIAT models."""

from pathlib import Path

import pandas as pd
from fiat_toolbox.infographics.infographics_factory import InforgraphicFactory
from fiat_toolbox.metrics_writer.fiat_write_metrics_file import MetricsFileWriter
from hydromt.config import configread
from pydantic import FilePath

from hydroflows.cfg import CFG_DIR
from hydroflows.workflow.method import Method
from hydroflows.workflow.method_parameters import Parameters

__all__ = ["FIATVisualize"]


class Input(Parameters):
    """Input parameters.

    This class represents the input data
    required for the :py:class:`FIATVisualize` method.
    """

    fiat_cfg: Path
    """
    The file path to the output of the FIAT model.
    """

    event_name: Path
    """Path to the eventset cfg file."""


class Output(Parameters):
    """Output parameters.

    This class represents the output data
    generated by the :py:class:`FIATVisualize` method.
    """

    fiat_infometrics: Path
    """The file path to the FIAT infometrics output."""

    fiat_infographics: Path
    """The file path to the FIAT infographics output."""


class Params(Parameters):
    """Parameters for the :py:class:`FIATVisualize`.

    Instances of this class are used in the :py:class:`FIATVisualize`
    method to define the required settings.

    See Also
    --------
    :py:class:`hydromt_fiat.fiat.FiatModel`
        For more details on the FiatModel used in hydromt_fiat.
    """

    output_dir: Path = ("models/fiat/fiat_metrics",)


class FIATVisualize(Method):
    """Rule for visualizing FIAT output."""

    name: str = "fiat_visualize"

    def __init__(
        self,
        fiat_cfg: Path,
        event_name: Path,
        output_dir: Path = "models/fiat/fiat_metrics",
        infographics_template: FilePath = CFG_DIR
        / "infographics"
        / "config_charts.toml",
        infometrics_template: FilePath = CFG_DIR
        / "infometrics"
        / "metrics_config.toml",
    ) -> None:
        """Create and validate a FIATVisualize instance.

        Parameters
        ----------
        fiat_cfg: Path
            The file path to the output of the FIAT model.
        event_name: Path
            The file path to the event set output of the hydromt SFINCS model.
        output_dir: Path = "models/fiat/fiat_metrics"
            The file path to the output of the FIAT infometrics and infographics.
        infographics_template: FilePath = CFG_DIR / "config_charts.toml"
            Path to the infographics template file.
        infometrics_template: FilePath = CFG_DIR / "metrics_config.toml"
            Path to the infometrics template file.

        See Also
        --------
        :py:class:`fiat_visualize Input <~hydroflows.methods.fiat.fiat_visualize.Input>`,
        :py:class:`fiat_visualize Output <~hydroflows.methods.fiat.fiat_visualize.Output>`,
        :py:class:`fiat_visualize Params <~hydroflows.methods.fiat.fiat_visualize.Params>`,
        :py:class:`hydromt_fiat.fiat.FIATModel`
        """
        self.params: Params = Params(output_dir=output_dir)
        self.input: Input = Input(
            fiat_cfg=fiat_cfg,
            event_name=event_name,
        )
        self.output: Output = Output(
            fiat_infometrics=self.params.output_dir
            / f"Infometrics_{self.input.event_name.stem}.csv",
            fiat_infographics=self.params.output_dir
            / f"{self.input.event_name.stem}_metrics.html",
        )

        self.infographics_template = infographics_template
        self.infometrics_template = infometrics_template

    def run(self):
        """Run the FIATVisualize method."""
        events = configread(self.input.event_name)["events"]
        if len(events) > 1:
            mode = "risk"
        else:
            mode = "single_event"

        scenario_name = self.input.event_name.stem

        # Write the metrics to file
        if mode == "risk":
            metrics_config = (
                self.infometrics_template.parent / "metrics_config_risk.toml"
            )
        else:
            metrics_config = self.infometrics_template

        metrics_writer = MetricsFileWriter(metrics_config)
        infometrics_name = f"Infometrics_{(scenario_name)}.csv"
        metrics_full_path = metrics_writer.parse_metrics_to_file(
            df_results=pd.read_csv(
                self.input.fiat_cfg.parent / "output" / "output.csv"
            ),
            metrics_path=self.output.fiat_infometrics.parent.joinpath(infometrics_name),
            write_aggregate=None,
        )

        # Write the infographic
        InforgraphicFactory.create_infographic_file_writer(
            infographic_mode=mode,
            scenario_name=scenario_name,
            metrics_full_path=metrics_full_path,
            config_base_path=Path(self.infographics_template.parent),
            output_base_path=self.output.fiat_infographics.parent,
        ).write_infographics_to_file()
