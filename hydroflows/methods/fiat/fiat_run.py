"""FIAT run rule/ submodule."""
import subprocess
from pathlib import Path

from pydantic import BaseModel, FilePath

from ..method import Method


class Input(BaseModel):
    """Input parameters.

    This class represents the input data
    required for the :py:class:`FIATRun` method.
    """

    fiat_haz: FilePath
    """The path to the FIAT hazard or risk (NetCDF) file."""

    fiat_cfg: FilePath
    """The file path to the FIAT configuration (toml) file from the
    FIAT model that needs to be run."""


class Output(BaseModel):
    """Output parameters.

    This class represents the output data
    generated by the :py:class:`FIATRun` method.
    """

    fiat_out: Path
    """Placeholder for docstrings."""


class Params(BaseModel):
    """Parameters.

    Instances of this class are used in the :py:class:`FIATRun`
    method to define the required settings.
    """

    fiat_bin: FilePath
    """The path to the FIAT executable."""

    threads: int = 1
    """The number of the threads to be used."""


class FIATRun(Method):
    """Rule for running a FIAT model.

    This class utilizes the :py:class:`Params <hydroflows.methods.fiat.fiat_run.Params>`,
    :py:class:`Input <hydroflows.methods.fiat.fiat_run.Input>`, and
    :py:class:`Output <hydroflows.methods.fiat.fiat_run.Output>` classes to
    run an existing FIAT model.
    """

    name: str = "fiat_run"
    params: Params
    input: Input
    output: Output

    def run(self):
        """Run the FIATRun method."""
        # Get basic info
        fiat_bin_path = self.params.fiat_bin
        fiat_cfg_path = self.input.fiat_cfg
        threads = self.params.threads

        # Setup the cli command
        command = [
            fiat_bin_path,
            "run",
            fiat_cfg_path,
            "-t",
            str(threads),
        ]

        # Execute the rule
        subprocess.run(command)
