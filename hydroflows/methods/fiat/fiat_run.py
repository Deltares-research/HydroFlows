"""FIAT run rule/ submodule."""

import subprocess
from pathlib import Path
from typing import Optional

from pydantic import model_validator

from hydroflows.workflow.method import Method
from hydroflows.workflow.method_parameters import Parameters


class Input(Parameters):
    """Input parameters.

    This class represents the input data
    required for the :py:class:`FIATRun` method.
    """

    # fiat_hazard: Path
    # """The path to the FIAT hazard or risk (NetCDF) file."""

    fiat_cfg: Path
    """The file path to the FIAT configuration (toml) file from the
    FIAT model that needs to be run."""


class Output(Parameters):
    """Output parameters.

    This class represents the output data
    generated by the :py:class:`FIATRun` method.
    """

    fiat_out: Path
    """The resulting file from the fiat calculations."""


class Params(Parameters):
    """Parameters.

    Instances of this class are used in the :py:class:`FIATRun`
    method to define the required settings.
    """

    fiat_bin: Optional[Path] = None
    """The path to the FIAT executable."""

    fiat_python: bool = False
    """Whether to run the FIAT model from a Python environment."""

    threads: int = 1
    """The number of the threads to be used."""

    @model_validator(mode="after")
    def check_fiat_bin(self):
        """Check the FIAT binary path."""
        if self.fiat_python:
            return
        if self.fiat_bin is None:
            raise ValueError(
                "FIAT binary path is required when not running in Python mode."
            )


class FIATRun(Method):
    """Rule for running a FIAT model.

    This class utilizes the :py:class:`Params <hydroflows.methods.fiat.fiat_run.Params>`,
    :py:class:`Input <hydroflows.methods.fiat.fiat_run.Input>`, and
    :py:class:`Output <hydroflows.methods.fiat.fiat_run.Output>` classes to
    run an existing FIAT model.
    """

    name: str = "fiat_run"

    _test_kwargs = {
        "fiat_cfg": Path("fiat.toml"),
        "fiat_bin": Path("fiat.exe"),
    }

    def __init__(
        self,
        fiat_cfg: Path,
        fiat_bin: Optional[Path] = None,
        fiat_python: bool = True,
        **params,
    ):
        """Create and validate a fiat_run instance.

        Parameters
        ----------
        fiat_cfg : Path
            Path to the FIAT config file.
        fiat_bin : Path
            Path to the FIAT executable
        fiat_python : bool
            Whether to run the FIAT model from a Python environment.
        **params
            Additional parameters to pass to the FIATRun instance.
            See :py:class:`fiat_run Params <hydroflows.methods.fiat.fiat_run.Params>`.

        See Also
        --------
        :py:class:`fiat_run Input <hydroflows.methods.fiat.fiat_run.Input>`
        :py:class:`fiat_run Output <hydroflows.methods.fiat.fiat_run.Output>`
        :py:class:`fiat_run Params <hydroflows.methods.fiat.fiat_run.Params>`
        """
        self.params: Params = Params(
            fiat_bin=fiat_bin, fiat_python=fiat_python, **params
        )
        self.input: Input = Input(fiat_cfg=fiat_cfg)
        self.output: Output = Output(
            fiat_out=self.input.fiat_cfg.parent / "output" / "spatial.gpkg"
        )

    def run(self):
        """Run the FIATRun method."""
        # Get basic info
        fiat_cfg_path = self.input.fiat_cfg.as_posix()
        entrypoint = (
            "fiat" if self.params.fiat_python else self.params.fiat_bin.as_posix()
        )

        # Setup the cli command
        command = [
            entrypoint,
            "run",
            fiat_cfg_path,
            "-t",
            str(self.params.threads),
        ]

        # Execute the rule
        subprocess.run(command, check=True)
