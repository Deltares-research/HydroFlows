"""FIAT updating submodule/ rules."""
from pathlib import Path

import yaml
from hydromt_fiat.fiat import FiatModel
from pydantic import BaseModel, FilePath

from hydroflows.methods.method import Method


class Input(BaseModel):
    """Input parameters.

    This class represents the input data
    required for the :py:class:`FIATUpdateHazard` method.
    """

    event_catalog: FilePath
    """"The data catalog from where to retrieve the hazard maps."""

    fiat_cfg: FilePath
    """The file path to the FIAT configuration (toml) file."""


class Output(BaseModel):
    """Output parameters.

    This class represents the output data
    generated by the :py:class:`FIATUpdateHazard` method.
    """

    fiat_haz: Path
    """"The path to the generated hazard or risk (NetCDF file)."""


class Params(BaseModel):
    """Parameters.

    Instances of this class are used in the :py:class:`FIATUpdateHazard`
    method to define the required settings.

    See Also
    --------
    :py:class:`hydromt_fiat.fiat.FiatModel`
        For more details on the setup_hazard method used in hydromt_fiat
    """

    map_type: str = "water_depth"
    """"The data type of each map speficied in the data catalog. A single map type
    applies for all the elements."""

    risk: bool = False
    """"The parameter that defines if a risk analysis is required."""

    var: str = "zsmax"
    """"Variable name."""


class FIATUpdateHazard(Method):
    """Rule for updating a FIAT model with hazard maps.

    This class utilizes the :py:class:`Params <hydroflows.methods.fiat.fiat_update.Params>`,
    :py:class:`Input <hydroflows.methods.fiat.fiat_update.Input>`, and
    :py:class:`Output <hydroflows.methods.fiat.fiat_update.Output>` classes to update
    a FIAT model with hazard maps.
    """

    name: str = "fiat_update_hazard"
    params: Params = Params()
    input: Input
    output: Output

    def run(self):
        """Run the FIATUpdateHazard method."""
        # Load the existing
        root = self.input.fiat_cfg.parent
        model = FiatModel(
            root=root,
            mode="w+",
        )
        model.read()

        ## WARNING! code below is necessary for now, as hydromt_fiat cant deliver
        # READ the hazard catalog
        hc_path = Path(self.input.event_catalog)
        with open(hc_path, "r") as _r:
            hc = yaml.safe_load(_r)

        paths = [
            Path(
                hc_path.parent, hc["roots"]["root_hazards"], item["hazards"][0]["path"]
            )
            for item in hc["events"]
        ]
        rp = [1 / item["probability"] for item in hc["events"]]

        # Setup the hazard map
        model.setup_hazard(
            paths,
            map_type=self.params.map_type,
            rp=rp,
            risk_output=self.params.risk,
        )

        model.write_grid(fn=Path("hazard", self.output.fiat_haz.name).as_posix())

        model.set_config("hazard.settings.var_as_band", True)

        # Write the config
        model.write_config()
