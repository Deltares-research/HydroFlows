"""Module/ Rule for building FIAT models."""
import os
from pathlib import Path

import geopandas as gpd
import hydromt_fiat
from hydromt.config import configread, configwrite
from hydromt_fiat.fiat import FiatModel

from hydroflows._typing import ListOfPath, ListOfStr
from hydroflows.config import HYDROMT_CONFIG_DIR
from hydroflows.methods.fiat.fiat_utils import new_column_headers
from hydroflows.workflow.method import Method
from hydroflows.workflow.method_parameters import Parameters

__all__ = ["FIATBuild"]

FIAT_DATA_PATH = Path(
    os.path.dirname(hydromt_fiat.__file__),
    "data",
    "hydromt_fiat_catalog_global.yml",
).as_posix()


class Input(Parameters):
    """Input parameters.

    This class represents the input data
    required for the :py:class:`FIATBuild` method.
    """

    region: Path
    """
    The file path to the geometry file that defines the region of interest
    for constructing a FIAT model.
    """


class Output(Parameters):
    """Output parameters.

    This class represents the output data
    generated by the :py:class:`FIATBuild` method.
    """

    fiat_cfg: Path
    """The file path to the FIAT configuration (toml) file."""


class Params(Parameters):
    """Parameters for the :py:class:`FIATBuild`.

    Instances of this class are used in the :py:class:`FIATBuild`
    method to define the required settings.

    See Also
    --------
    :py:class:`hydromt_fiat.fiat.FiatModel`
        For more details on the FiatModel used in hydromt_fiat.
    """

    fiat_root: Path
    """The path to the root directory where the FIAT model will be created."""

    data_libs: ListOfPath | ListOfStr = ["artifact_data"]
    """List of data libraries to be used. This is a predefined data catalog in
    yml format, which should contain the data sources specified in the config file."""

    config: Path = Path(HYDROMT_CONFIG_DIR, "fiat_build.yaml")
    """The path to the configuration file (.yml) that defines the settings
    to build a FIAT model. In this file the different model components
    that are required by the :py:class:`hydromt_fiat.fiat.FiatModel` are listed.
    Every component defines the setting for each hydromt_fiat setup methods.
    For more information see hydromt_fiat method
    `documentation <https://deltares.github.io/hydromt_fiat/latest/user_guide/user_guide_overview.html>`_."""

    continent: str = "South America"
    """Continent of the region of interest."""


class FIATBuild(Method):
    """Rule for building FIAT."""

    name: str = "fiat_build"

    _test_kwargs = {
        "region": Path("region.geojson"),
    }

    def __init__(
        self,
        region: Path,
        fiat_root: Path = "models/fiat",
        **params,
    ) -> None:
        """Create and validate a FIATBuild instance.

        Parameters
        ----------
        region : Path
            The file path to the geometry file that defines the region of interest
            for constructing a FIAT model.
        fiat_root : Path
            The path to the root directory where the FIAT model will be created, by default "models/fiat".
        **params
            Additional parameters to pass to the FIATBuild instance.
            See :py:class:`fiat_build Params <hydroflows.methods.fiat.sfincs_build.Params>`.

        See Also
        --------
        :py:class:`fiat_build Input <~hydroflows.methods.fiat.fiat_build.Input>`,
        :py:class:`fiat_build Output <~hydroflows.methods.fiat.fiat_build.Output>`,
        :py:class:`fiat_build Params <~hydroflows.methods.fiat.fiat_build.Params>`,
        :py:class:`hydromt_fiat.fiat.FIATModel`
        """
        self.params: Params = Params(fiat_root=fiat_root, **params)
        self.input: Input = Input(region=region)
        self.output: Output = Output(fiat_cfg=self.params.fiat_root / "settings.toml")

    def run(self):
        """Run the FIATBuild method."""
        # Read template config
        opt = configread(self.params.config)
        # Add additional information
        region_gdf = gpd.read_file(self.input.region.as_posix())
        region_gdf = region_gdf.dissolve()
        # Select only geometry in case gdf contains more columns
        # Hydromt-fiat selects first column for geometry when fetching OSM
        region_gdf = region_gdf[["geometry"]]
        # Setup the model
        root = self.params.fiat_root
        model = FiatModel(
            root=root,
            mode="w+",
            data_libs=[FIAT_DATA_PATH] + self.params.data_libs,
        )
        opt = {model._CLI_ARGS["region"]: {"region": {"geom": region_gdf}}, **opt}
        # Build the model
        model.build(opt=opt, write=False)

        # Set the column headers for newer FIAT verions
        # TODO remove once HydroMT-FIAT supports this
        model.exposure.exposure_db.rename(
            new_column_headers(model.exposure.exposure_db.columns),
            axis=1,
            inplace=True,
        )
        for geom in model.exposure.exposure_geoms:
            geom.rename(new_column_headers(geom.columns), axis=1, inplace=True)
        # Write to drive
        model.write()

        # Write opt as yaml
        configwrite(root / "fiat_build.yaml", opt)


if __name__ == "__main__":
    pass
