"""Module for climate factors, wip."""

from pathlib import Path

from hydroflows._typing import ListOfPath, ListOfStr
from hydroflows.workflow.method import Method
from hydroflows.workflow.method_parameters import Parameters


class Input(Parameters):
    """Input parameters.

    This class represents the input data
    required for the :py:class:`Rainfall` method.
    """

    region: Path
    """
    The Path to the region vector file.
    """


class Output(Parameters):
    """Output parameters.

    This class represents the output data
    generated by the :py:class:`Rainfall` method.
    """

    factors_ds: Path
    """
    The path to the dataset containing the climate factors.
    """


class Params(Parameters):
    """Parameters for the :py:class:`Rainfall`.

    Instances of this class are used in the :py:class:`Rainfall`
    method to define the required settings.
    """

    data_libs: ListOfPath | ListOfStr
    """List of data libraries to be used. This is a predefined data catalog in
    yml format, which should contain the data sources specified in the config file."""

    meteo: str
    """
    Name of the meteological dataset that is present in the supplied data catalog(s).
    """

    output_dir: Path
    """
    The output directory of the dataset.
    """


class Rainfall(Method):
    """Rule for meteo climate factors."""

    name: str = "rainfall"

    _test_kwargs = {}

    def __init__(self, region: Path, **params) -> None:
        """_summary_.

        Parameters
        ----------
        region : Path
            _description_
        """
        self.params: Params = Params(**params)
        self.input: Input = Input(region=region)
        self.output: Output = Output(factors_ds=self.params.output_dir / "data.nc")

    def run(self) -> None:
        """Run the Rainfall method."""
