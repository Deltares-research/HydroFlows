"""Module for gridded statistics of climate data, wip."""

from pathlib import Path

from hydroflows._typing import ListOfPath, ListOfStr
from hydroflows.methods.climate.grid_utils import extract_climate_projections_statistics
from hydroflows.workflow.method import ExpandMethod
from hydroflows.workflow.method_parameters import Parameters


class Input(Parameters):
    """Input parameters.

    This class represents the input data
    required for the :py:class:`ClimateStatistics` method.
    """

    region: Path
    """
    The Path to the region vector file.
    """


class Output(Parameters):
    """Output parameters.

    This class represents the output data
    generated by the :py:class:`ClimateStatistics` method.
    """

    stats: Path
    """
    The path to the dataset containing the climate factors.
    """


class Params(Parameters):
    """Parameters for the :py:class:`ClimateStatistics`.

    Instances of this class are used in the :py:class:`Rainfall`
    method to define the required settings.
    """

    data_libs: ListOfPath | ListOfStr
    """List of data libraries to be used. This is a predefined data catalog in
    yml format, which should contain the data sources specified in the config file."""

    model: str
    """
    The specific climate model to be used. Chose e.g. ... # TODO
    """

    scenario: str
    """
    The specific climate scenario. Chose from ... # TODO
    """

    horizon: tuple
    """
    The horizon of the future scenario.
    """

    data_root: Path
    """
    The output directory of the dataset.
    """

    historical: bool = (True,)
    """Whether it is a historical period or not."""


class ClimateStatistics(ExpandMethod):
    """Method for gridded statistics of the climate model."""

    name: str = "climate_statistics"

    _test_kwargs = {}

    def __init__(
        self,
        region: Path,
        **params,
    ) -> None:
        """_summary_.

        Parameters
        ----------
        region : Path
            _description_
        """
        self.params: Params = Params(**params)
        self.input: Input = Input(region=region)
        name = "historical"
        if not self.params.historical:
            name = "future"
        self.output: Output = Output(
            factors_ds=self.params.data_root
            / f"stats_{self.params.model}_{self.params.scenario}_{name}.nc",
        )

    def run(self) -> None:
        """Run the gridded climate statistics method."""
        # Directly call the worker function
        stats_ds = extract_climate_projections_statistics(
            region=self.input.region,
            data_catalog=self.params.data_libs,
        )

        stats_ds.to_netcdf()
