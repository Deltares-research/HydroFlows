"""Method for calculating future change factors."""

from pathlib import Path

from hydroflows._typing import ListOfListOfInt
from hydroflows.methods.climate.grid_utils import get_expected_change_grid
from hydroflows.methods.climate.utils import to_netcdf
from hydroflows.workflow.method import ExpandMethod
from hydroflows.workflow.method_parameters import Parameters


class Input(Parameters):
    """Input parameters.

    This class represents the input data
    required for the :py:class:`ClimateFactorsGridded` method.
    """

    hist_stats: Path
    """Path to the dataset with historical climate statistics."""

    fut_stats: Path
    """Path to the dataset with future climate statistics."""


class Output(Parameters):
    """output parameters.

    this class represents the output data
    generated by the :py:class:`climatefactorsgridded` method.
    """

    change_factors: Path
    """Path to the file containing the gridded climate change factors."""


class Params(Parameters):
    """Parameters for the :py:class:`ClimateFactorsGridded`.

    Instances of this class are used in the :py:class:`ClimateFactorsGridded`
    method to define the required settings.
    """

    model: str
    """
    The specific climate model to be used.
    """

    scenario: str
    """
    The specific climate scenario.
    """

    horizon: ListOfListOfInt
    """
    The horizon of the future scenario.
    """

    wildcard: str = "horizons"
    """
    Name of the wildcard.
    """

    data_root: Path
    """
    The output directory of the dataset.
    """


class ClimateFactorsGridded(ExpandMethod):
    """Method for climate model change factors."""

    name: str = "climate_factors_gridded"

    _test_kwargs = {
        "hist_stats": Path("hist_stats.nc"),
        "fut_stats": Path("fut_stats.nc"),
        "model": "NOAA-GFDL_GFDL-ESM4",
        "scenario": "ssp585",
        "horizon": [[2090, 2100]],
        "data_root": Path("data", "input", "stats"),
    }

    def __init__(self, hist_stats: Path, fut_stats: Path, **params) -> None:
        """Create gridded climate change factors from statistics.

        Parameters
        ----------
        hist_stats : Path
            Path to the file with historical climate statistics.
        fut_stats : Path
            Path to the file with future climate statistics.
        **params
            Additional parameters to pass to the ClimateFactorsGridded instance.
            See :py:class:`grid_change Params <hydroflows.methods.climate.grid_change.Params>`.

        See Also
        --------
        :py:class:`grid_change Input <~hydroflows.methods.climate.grid_change.Input>`
        :py:class:`grid_change Output <~hydroflows.methods.climate.grid_change.Output>`
        :py:class:`grid_change Params <~hydroflows.methods.climate.grid_change.Params>`
        """
        self.params: Params = Params(**params)
        self.input: Input = Input(hist_stats=hist_stats, fut_stats=fut_stats)
        wc = f"{{{self.params.wildcard}}}"
        self.output: Output = Output(
            change_factors=self.params.data_root
            / f"change_{self.params.model}_{self.params.scenario}_{wc}.nc"
        )
        self.formatted_wildcards = [
            "-".join([str(i) for i in item]) for item in self.params.horizon
        ]
        self.set_expand_wildcard(
            self.params.wildcard,
            values=self.formatted_wildcards,
        )

    def run(self):
        """Run the climate factors gridded method."""
        for wc in self.formatted_wildcards:
            change_ds = get_expected_change_grid(
                nc_historical=self.input.hist_stats,
                nc_future=self.input.fut_stats,
                name_horizon=wc,
            )

            to_netcdf(
                change_ds,
                file_name=f"change_{self.params.model}_{self.params.scenario}_{wc}.nc",
                output_dir=self.params.data_root,
            )
