"""Method for calculating future change factors."""

from pathlib import Path

from hydroflows.workflow.method import Method
from hydroflows.workflow.method_parameters import Parameters


class Input(Parameters):
    """Input parameters.

    This class represents the input data
    required for the :py:class:`ClimateFactorsGridded` method.
    """

    hist_stats: Path
    """Path to the dataset with historical climate statistics."""

    fut_stats: Path
    """Path to the dataset with future climate statistics."""


class Output(Parameters):
    """output parameters.

    this class represents the output data
    generated by the :py:class:`climatefactorsgridded` method.
    """

    change_factors: Path
    """Path to the file containing the gridded climate change factors."""


class Params(Parameters):
    """Parameters for the :py:class:`ClimateFactorsGridded`.

    Instances of this class are used in the :py:class:`Rainfall`
    method to define the required settings.
    """

    model: str
    """
    The specific climate model to be used. Chose e.g. ... # TODO
    """

    scenario: str
    """
    The specific climate scenario. Chose from ... # TODO
    """

    horizon: tuple
    """
    The horizon of the future scenario.
    """

    data_root: Path
    """
    The output directory of the dataset.
    """


class ClimateFactorsGridded(Method):
    """Method for climate model change factors."""

    def __init__(self, hist_stats: Path, fut_stats: Path, **params):
        self.params: Params = Params(**params)
        self.input: Input = Input(hist_stats=hist_stats, fut_stats=fut_stats)
        name = "-".join(self.params.horizon)
        self.output: Output = Output(
            change_factors=self.params.data_root
            / f"change_{self.params.model}_{self.params.scenario}_{name}.nc"
        )

    def run(self):
        """Run the climate factors gridded method."""
        pass
