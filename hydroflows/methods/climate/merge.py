"""Blabla."""

from pathlib import Path

from hydroflows._typing import ListOfPath
from hydroflows.methods.climate.merge_utils import merge_climate_datasets
from hydroflows.methods.climate.utils import to_netcdf
from hydroflows.workflow.method import ReduceMethod
from hydroflows.workflow.method_parameters import Parameters


class Input(Parameters):
    """Input parameters.

    This class represents the input data
    required for the :py:class:`MergeDatasets` method.
    """

    datasets: ListOfPath | Path
    """The path(s) to the datasets of the different climate models."""


class Output(Parameters):
    """output parameters.

    this class represents the output data
    generated by the :py:class:`MergeDatasets` method.
    """

    merged: Path
    """Path to the single output merged dataset."""


class Params(Parameters):
    """Parameters for the :py:class:`MergeDatasets`.

    Instances of this class are used in the :py:class:`Rainfall`
    method to define the required settings.
    """

    scenario: str
    """
    The specific climate scenario. Chose from ... # TODO
    """

    horizon: str
    """
    The specific horizon # TODO ...
    """

    data_root: Path
    """
    The output directory of the dataset.
    """

    res: float = 0.25
    """Resolution (in degrees) of the resulting dataset. Default is 0.25 degrees."""


class MergeDatasets(ReduceMethod):
    """Method to merge datasets of different climate models."""

    name: str = "merge_datasets"

    _test_kwargs = {}

    def __init__(
        self,
        datasets: list,
        **params,
    ):
        self.params: Params = Params(**params)
        self.input: Input = Input(datasets=datasets)
        self.output: Output = Output(
            merged=self.params.data_root
            / f"assemble_{self.params.scenario}_{self.params.horizon}.nc"
        )

        pass

    def run(self):
        """Run the merge datasets method."""
        merged_ds = merge_climate_datasets(
            self.input.datasets,
            self.params.res,
        )

        to_netcdf(
            merged_ds,
            file_name=self.output.merged.name,
            output_dir=self.output.merged.parent,
        )
