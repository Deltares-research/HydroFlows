"""Merge multiple (climate) datasets into one."""

from pathlib import Path

from hydroflows._typing import ListOfPath
from hydroflows.methods.climate.merge_utils import merge_climate_datasets
from hydroflows.methods.climate.utils import to_netcdf
from hydroflows.workflow.method import ReduceMethod
from hydroflows.workflow.method_parameters import Parameters


class Input(Parameters):
    """Input parameters.

    This class represents the input data
    required for the :py:class:`MergeDatasets` method.
    """

    datasets: ListOfPath | Path
    """The path(s) to the datasets of the different climate models."""


class Output(Parameters):
    """output parameters.

    this class represents the output data
    generated by the :py:class:`MergeDatasets` method.
    """

    merged: Path
    """Path to the single output merged dataset."""


class Params(Parameters):
    """Parameters for the :py:class:`MergeDatasets`.

    Instances of this class are used in the :py:class:`MergeDatasets`
    method to define the required settings.
    """

    scenario: str
    """
    The specific climate scenario.
    """

    horizon: str
    """
    The specific horizon.
    """

    data_root: Path
    """
    The output directory of the dataset.
    """

    aligned: bool = False
    """Whether the datasets are already aligned or not"""

    res: float = 0.25
    """Resolution (in degrees) of the resulting dataset. Default is 0.25 degrees."""

    quantile: float = 0.5
    """The quantile the merged data should be given the input datasets."""


class MergeDatasets(ReduceMethod):
    """Method to merge datasets of different climate models."""

    name: str = "merge_datasets"

    _test_kwargs = {
        "datasets": [Path("change1.nc"), Path("change2.nc")],
        "scenario": "ssp585",
        "horizon": "2090-2100",
        "data_root": Path("data"),
    }

    def __init__(
        self,
        datasets: list,
        **params,
    ) -> None:
        """Merge mulitple gridded climate factor datasets.

        Parameters
        ----------
        datasets : list
            List of paths of the datasets for merging.
        **params
            Additional parameters to pass to the MergeDatasets instance.
            See :py:class:`merge Params <hydroflows.methods.climate.merge.Params>`.

        See Also
        --------
        :py:class:`merge Input <~hydroflows.methods.climate.merge.Input>`
        :py:class:`merge Output <~hydroflows.methods.climate.merge.Output>`
        :py:class:`merge Params <~hydroflows.methods.climate.merge.Params>`
        """
        self.params: Params = Params(**params)
        self.input: Input = Input(datasets=datasets)
        self.output: Output = Output(
            merged=self.params.data_root
            / f"ensemble_{self.params.scenario}_{self.params.horizon}.nc"
        )

    def run(self):
        """Run the merge datasets method."""
        merged_ds = merge_climate_datasets(
            self.input.datasets,
            aligned=self.params.aligned,
            res=self.params.res,
            quantile=self.params.quantile,
        )

        to_netcdf(
            merged_ds,
            file_name=self.output.merged.name,
            output_dir=self.output.merged.parent,
        )
