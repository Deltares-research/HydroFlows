"""Downscale climate data method."""

from pathlib import Path

import hydromt  # noqa: F401
import xarray as xr

from hydroflows.methods.climate.utils import to_netcdf
from hydroflows.workflow.method import Method
from hydroflows.workflow.method_parameters import Parameters


class Input(Parameters):
    """Input parameters.

    This class represents the input data
    required for the :py:class:`DownscaleClimateDataset` method.
    """

    dataset: Path
    """The path to the to be downscaled dataset."""

    target_grid: Path
    """
    The dataset with the desired resolution.
    """


class Output(Parameters):
    """output parameters.

    this class represents the output data
    generated by the :py:class:`DownscaleClimateDataset` method.
    """

    downscaled: Path
    """Path to the downscaled dataset."""


class Params(Parameters):
    """Parameters for the :py:class:`DownscaleClimateDataset`.

    Instances of this class are used in the :py:class:`DownscaleClimateDataset`
    method to define the required settings.
    """

    output_dir: Path
    """
    The output directory of the dataset.
    """

    resample_method: str = "nearest"
    """Method of resampling the low(er) res dataset."""


class DownscaleClimateDataset(Method):
    """Method to downscale climate change factor dataset."""

    name: str = "downscale_climate_datasets"

    _test_kwargs = {
        "dataset": Path("dataset.nc"),
        "target_grid": Path("target_grid.nc"),
        "output_dir": Path("data"),
    }

    def __init__(
        self,
        dataset: Path,
        target_grid: Path,
        output_dir: Path,
        **params,
    ):
        """Downscale a dataset to the resolution of another dataset.

        Parameters
        ----------
        dataset : Path
            Path to the to be downscaled dataset.
        target_grid : Path
            Path to the dataset with the target resolution.
        **params
            Additional parameters to pass to the DownscaleClimateDataset instance.
            See :py:class:`downscale Params <hydroflows.methods.climate.downscale.Params>`.

        See Also
        --------
        :py:class:`downscale Input <~hydroflows.methods.climate.downscale.Input>`
        :py:class:`downscale Output <~hydroflows.methods.climate.downscale.Output>`
        :py:class:`downscale Params <~hydroflows.methods.climate.downscale.Params>`
        """
        self.params: Params = Params(output_dir=output_dir, **params)
        self.input: Input = Input(dataset=dataset, target_grid=target_grid)
        fname = self.input.dataset.stem
        fsuffix = self.input.dataset.suffix
        self.output: Output = Output(
            downscaled=self.params.output_dir / f"{fname}_downscaled{fsuffix}"
        )

    def run(self):
        """Run the downscale dataset method."""
        # open datasets
        ds = xr.open_dataset(self.input.dataset, lock=False)
        # Open dst_grid similar to WflowModel.read_grid
        # TODO: do we need to load the entire dataset or only the coordinates?
        target_grid = xr.open_dataset(
            self.input.target_grid, mask_and_scale=False, decode_coords="all"
        ).load()
        target_grid.close()
        # make sure maps are always North -> South oriented for hydromt
        if target_grid.raster.res[1] > 0:
            target_grid = target_grid.raster.flipud()

        # squeeze
        ds = ds.squeeze()

        # TODO move to change_factors method ?
        # convert from percentage to fraction for variables that are not temperature
        for var in ds.data_vars:
            if not var.startswith("temp"):
                ds[var] = 1 + ds[var] / 100
                ds[var].attrs["long_name"] = f"fraction change in {var}"
                ds[var].attrs["units"] = "-"

        ds_downscaled = ds.raster.reproject_like(
            target_grid,
            method=self.params.resample_method,
        )

        # TODO: if this is wflow-specific it should be moved to wflow methods
        # rename from month to time for wflow
        if "month" in ds_downscaled.coords:
            ds_downscaled = ds_downscaled.rename({"month": "time"})

        # write netcdf
        to_netcdf(
            ds_downscaled,
            file_name=self.output.downscaled.name,
            output_dir=self.params.output_dir,
        )
