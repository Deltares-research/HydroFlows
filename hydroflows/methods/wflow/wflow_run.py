"""Wflow run method."""

import subprocess
from pathlib import Path

from pydantic import BaseModel, FilePath

from hydroflows.methods.method import Method

__all__ = ["WflowRun"]


class Input(BaseModel):
    """Input parameters.

    This class represents the input data
    required for the :py:class:`WflowRun` method.
    """

    wflow_toml: FilePath
    """The file path to the Wflow (toml) configuration file from the
    Wflow model that needs to be run."""


class Output(BaseModel):
    """Output parameters.

    This class represents the output data
    generated by the :py:class:`WflowRun` method.
    """

    # TODO: should if this file is in the wflow toml
    wflow_output_timeseries: Path
    """The path to the generated Wflow output timeseries. Note that
    the output file should be in the Wflow toml configuration, for
    example, in case that a model was updated using the
    :py:class:`hydroflows.methods.wflow.wflow_update_forcing.WflowUpdateForcing`
    method and includes Sfincs source outflow locations (built using the
    :py:class:`hydroflows.methods.wflow.wflow_update_forcing.WflowBuild` method),
    the file should be named as output_scalar.nc."""


class Params(BaseModel):
    """Parameters.

    Instances of this class are used in the :py:class:`WflowRun`
    method to define the required settings.
    """

    wflow_bin: Path
    """The path to the wflow executable."""

    julia_num_threads: int = 4
    """The number of the threads to be used from Julia."""


class WflowRun(Method):
    """Rule for running a Wflow model.

    This class utilizes the :py:class:`Params <hydroflows.methods.wflow.wflow_run.Params>`,
    :py:class:`Input <hydroflows.methods.wflow.wflow_run.Input>`, and
    :py:class:`Output <hydroflows.methods.wflow.wflow_run.Output>` classes to
    run an existing Wflow model.
    """

    name: str = "wflow_run"
    params: Params
    input: Input
    output: Output

    def run(self):
        """Run the WflowRun method."""
        # Set environment variable JULIA_NUM_THREADS
        env = {"JULIA_NUM_THREADS": str(self.params.julia_num_threads)}

        # Path to the wflow_cli executable
        wflow_cli_path = self.params.wflow_bin

        # Command to run wflow_cli with the TOML file
        command = [str(wflow_cli_path), str(self.input.wflow_toml)]

        # Call the executable using subprocess
        subprocess.run(command, env=env, check=True)
