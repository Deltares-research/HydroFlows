"""Downscale data to wflow model resolution."""

from os.path import relpath
from pathlib import Path

import hydromt  # noqa: F401
import xarray as xr

from hydroflows.io import to_netcdf
from hydroflows.methods.wflow.wflow_utils import (
    configread,
    configwrite,
    get_config,
    set_config,
)
from hydroflows.workflow.method import Method
from hydroflows.workflow.method_parameters import Parameters


class Input(Parameters):
    """Input parameters.

    This class represents the input data
    required for the :py:class:`WflowDownscale` method.
    """

    dataset: Path
    """The path to the to be downscaled dataset."""

    target_grid: Path
    """
    The dataset with the desired resolution.
    """

    wflow_toml: Path
    """
    The path to the wflow settings toml that will be updated.
    """


class Output(Parameters):
    """output parameters.

    this class represents the output data
    generated by the :py:class:`WflowDownscale` method.
    """

    downscaled: Path
    """Path to the downscaled dataset."""

    wflow_out_toml: Path
    """
    The path to the updated wflow settings toml.
    """


class Params(Parameters):
    """Parameters for the :py:class:`WflowDownscale`.

    Instances of this class are used in the :py:class:`WflowDownscale`
    method to define the required settings.
    """

    output_dir: Path
    """
    The output directory of the dataset.
    """

    resample_method: str = "nearest"
    """Method of resampling the low(er) res dataset."""


class WflowDownscale(Method):
    """Method to downscale data to wflow model resolution."""

    name: str = "wflow_downscale"

    _test_kwargs = {
        "dataset": Path("dataset.nc"),
        "target_grid": Path("target_grid.nc"),
        "wflow_toml": Path("wflow_sbm.toml"),
        "output_dir": Path("data"),
    }

    def __init__(
        self,
        dataset: Path,
        target_grid: Path,
        wflow_toml: Path,
        output_dir: Path,
        **params,
    ):
        """Downscale a dataset to the resolution of a wflow model.

        Parameters
        ----------
        dataset : Path
            Path to the to be downscaled dataset.
        target_grid : Path
            Path to the dataset with the target resolution.
        wflow_toml : Path
            Path to the wflow settings toml that needs to be adjusted.
        **params
            Additional parameters to pass to the WflowDownscale instance.
            See :py:class:`wflow_downscale Params <hydroflows.methods.wflow.wflow_downscale.Params>`.

        See Also
        --------
        :py:class:`wflow_downscale Input <~hydroflows.methods.wflow.wflow_downscale.Input>`
        :py:class:`wflow_downscale Output <~hydroflows.methods.wflow.wflow_downscale.Output>`
        :py:class:`wflow_downscale Params <~hydroflows.methods.wflow.wflow_downscale.Params>`
        """
        self.params: Params = Params(output_dir=output_dir, **params)
        self.input: Input = Input(
            dataset=dataset,
            target_grid=target_grid,
            wflow_toml=wflow_toml,
        )
        fname = self.input.dataset.stem
        fsuffix = self.input.dataset.suffix
        self.output: Output = Output(
            downscaled=self.params.output_dir / f"{fname}_downscaled{fsuffix}",
            wflow_out_toml=self.params.output_dir / "wflow_sbm.toml",
        )

    def run(self):
        """Run the downscale dataset method."""
        # Open input files
        ds = xr.open_dataset(self.input.dataset, lock=False)
        cfg = configread(self.input.wflow_toml)
        # Open dst_grid similar to WflowModel.read_grid
        # TODO: do we need to load the entire dataset or only the coordinates?
        target_grid = xr.open_dataset(
            self.input.target_grid, mask_and_scale=False, decode_coords="all"
        ).load()
        target_grid.close()
        # make sure maps are always North -> South oriented for hydromt
        if target_grid.raster.res[1] > 0:
            target_grid = target_grid.raster.flipud()

        # squeeze
        ds = ds.squeeze()

        # Downscale the data
        ds_downscaled = ds.raster.reproject_like(
            target_grid,
            method=self.params.resample_method,
        )

        # rename from month to time for wflow
        if "month" in ds_downscaled.coords:
            ds_downscaled = ds_downscaled.rename({"month": "time"})

        # Update the config
        redirect = ["input.path_forcing", "input.path_static"]
        # Redirect paths to forcing and staticmaps
        for item in redirect:
            value = get_config(cfg, item)
            full_path = Path(value)
            if not full_path.is_absolute():
                full_path = Path(self.input.wflow_toml.parent, full_path)
            else:
                continue
            new_path = Path(relpath(full_path, self.output.wflow_out_toml.parent))
            set_config(cfg, item, new_path.as_posix())
        # Put the downscaled dataset in the toml
        set_config(cfg, "input.path_forcing_scale", self.output.downscaled.name)

        # Write the config
        configwrite(cfg, self.output.wflow_out_toml)

        # write netcdf
        to_netcdf(
            ds_downscaled,
            file_name=self.output.downscaled.name,
            output_dir=self.params.output_dir,
        )
