[build-system]
requires = ["flit_core >=3.4.0,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "hydroflows"
authors = [
  { name = "Dirk Eilander", email = "dirk.eilander@deltares.nl" },
  { name = "Hessel Winsemius", email = "hessel.winsemius@deltares.nl" },
  { name = "Brendan Dalmijn", email = "brendan.dalmijn@deltares.nl" },
  { name = "Willem Tromp", email = "willem.tromp@deltares.nl" },
  { name = "Athanasios Tsiokanos", email = "athanasios.tsiokanos@deltares.nl"},
]
dependencies = [
  "cartopy",                  # plotting
  "click",                    # CLI
  "geopandas",                # Reading vector data
  "hatyan",                   # harmonic tidal analysis and prediction
  "hydromt>=0.9.4, <1.0",           # hydromt core for setting up models
  "hydromt_fiat@git+https://github.com/Deltares/hydromt_fiat.git@9a053e073fdc635069261333fe8f789240d1118a", # hydromt plugin for FIAT models
  "hydromt_sfincs>=1.1.0, <1.2",           # hydromt plugin for sfincs models
  "hydromt_wflow>=0.6, <0.7",            # hydromt plugin for wflow models
  "matplotlib",               # plotting
  "numpy>=1.20",              # pin necessary to ensure compatability with C headers
  "pooch",                    # test data fetching
  "pydantic",                 # data validation
  "requests",                 # data fetching
  "tqdm",                     # progress bar
  "xarray",                   # data handling
  "jinja2",                   # templating
]

requires-python = ">=3.10"
readme = "README.rst"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering :: Hydrology",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
]
dynamic = ['version', 'description']

[project.optional-dependencies]
dev = [
  "pip>=23.1.2", # needed for editable installs
  "pre-commit",  # linting
  "ruff",        # linting
  "tomli",       # parsing toml files
  "hydroflows[test, doc, extra]"
]
doc = [
  "pip>=23.1.2", # needed for editable installs
  "sphinx",
  "sphinx_design",
  "pydata-sphinx-theme",
  "autodoc_pydantic",
  "sphinxcontrib-programoutput",
]
extra = [
  "jupyter",
  "snakemake",      # Workflow manager
  "graphviz",
  "osmnx>1,<2",     # OpenStreetMap data temporarly pinned
]
test = [
  "pytest>=2.7.3",  # testing framework
  "pytest-cov",     # test coverage
  "pytest-mock",    # mocking
  "pytest-timeout", # darn hanging tests
  "hydroflows[extra]",      # needed for testing snake file
]

full = ["hydroflows[dev, doc, test, extra]"]

[project.urls]
Source = "https://github.com/Deltares-research/HydroFlows"

[project.scripts]
hydroflows = "hydroflows.cli.main:cli"

[tool.pytest.ini_options]
testpaths = ["test"]
markers = ["requires_data", "slow"]

[tool.coverage.run]
branch = true
source = ["./hydroflows"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true

[tool.coverage.html]
directory = ".cov"

[tool.ruff]
line-length = 88
target-version = "py310"

# enable pydocstyle (E), pyflake (F) and isort (I), pytest-style (PT), bugbear (B)
select = ["E", "F", "I", "PT", "D", "B"]
ignore-init-module-imports = true
ignore = ["D211", "D213", 'D206', 'E501', "E741", "D105", "E712", "B904", "B905"]
exclude = ["docs"]

[tool.ruff.per-file-ignores]
"tests/**" = ["D100", "D101", "D102", "D103", "D104", "PT001"]
"tests/conftest.py" = ["E402"]
"hydroflows/__init__.py" = ["E402", "F401", "F403"]
"hydroflows/**/__init__.py" = ["F401", "F403"]
"hydroflows/templates/*.py" = ["D103", "D100", "D104", "D205", "D400", "F403"]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.make_env]
channels = ["conda-forge", "bioconda"]
deps_not_in_conda = [
  "hydromt_fiat",
  "sphinx_design",
  "hatyan",
  "autodoc_pydantic",
  "sphinxcontrib-programoutput",
]

[tool.pixi.project]
channels = ["conda-forge", "bioconda"]
platforms = ["win-64", "linux-64"]

[tool.pixi.pypi-dependencies]
hydroflows = { path = ".", editable = true }

# conda dependencies
[tool.pixi.dependencies]
hydromt = ">=0.9.4,<1.0"
hydromt_sfincs = ">=1.1.0,<1.2"
hydromt_wflow = ">=0.6,<0.7"
snakemake = "*"

# [tool.pixi.feature.py310.dependencies]
# python = "3.10.*"

[tool.pixi.feature.py311.dependencies]
python = "3.11.*"

[tool.pixi.environments]
default = { features = ["dev", "doc", "test", "extra", "py311"], solve-group = "py311" }
doc = { features = ["doc"], solve-group = "py311" }
slim = { solve-group = "py311" }
extra = { features = ["extra"], solve-group = "py311" }
# dev-py310 = { features = ["dev", "doc", "test", "extra", "py310"], solve-group = "py310" }
# test-py310 = { features = ["test"], solve-group = "py310" }
test-py311 = { features = ["test"], solve-group = "py311" }

[tool.pixi.tasks]
install-pre-commit = "pre-commit install"

lint = { cmd = ["pre-commit", "run", "--all"] }

test = { cmd = ["pytest", "tests", "--cov=hydroflows", "--cov-report=term-missing"] }
test-not-data = { cmd = ["pytest", "tests", "-m", "not requires_data and not slow", "-vv"] }

examples-pluvial = { cmd = ["python", "pluvial_hazard.py"], outputs = ["examples/cases/pluvial_hazard/Snakefile"], inputs = ["examples/pluvial_hazard.py"], cwd = "examples" }
examples-clean = { cmd = ["rm", "-rf", "examples/cases/**"] }


docs-dummy = {cmd = ["sphinx-build", "./docs", "./docs/_build", "-b", "dummy", "-W"]}
docs-html = {cmd = ["sphinx-build", "-M", "html", "./docs", "./docs/_build", "-W"]}
docs-clean = {cmd = ["rm", "-rf", "./docs/_build", "./docs/_generated"] }
docs-html-clean = { depends_on = ["docs-clean", "docs-html"] }

get-version = { cmd = ["python", "-c", "import hydroflows; print(hydroflows.__version__)"] }
