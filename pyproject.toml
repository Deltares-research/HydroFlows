[build-system]
requires = ["flit_core >=3.4.0,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "hydroflows"
authors = [
  { name = "Dirk Eilander", email = "dirk.eilander@deltares.nl" },
  { name = "Hessel Winsemius", email = "hessel.winsemius@deltares.nl" },
  { name = "Brendan Dalmijn", email = "brendan.dalmijn@deltares.nl" },
  { name = "Willem Tromp", email = "willem.tromp@deltares.nl" },
  { name = "Athanasios Tsiokanos", email = "athanasios.tsiokanos@deltares.nl"},
]
dependencies = [
  "click",                    # CLI
  "geopandas",                # Reading vector data
  "hydromt>=0.9.4",           # hydromt core for setting up models
  "hydromt_fiat@git+ssh://git@github.com/Deltares/hydromt_fiat.git", # hydromt plugin for FIAT models
  "hydromt_sfincs",           # hydromt plugin for sfincs models
  "hydromt_wflow",            # hydromt plugin for wflow models
  "numpy>=1.20",              # pin necessary to ensure compatability with C headers
  "pulp==2.7.0",              # Snakemake's engine >= 2.8.x causes issues
  "pydantic",                 # data validation
  "snakemake==7.32.4",        # Workflow manager, 8.x.x is bad
  "tomli",                    # parsing toml files
  "tomli-w",                  # writing toml files
]

requires-python = ">=3.9"
readme = "README.md"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering :: Hydrology",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
]
dynamic = ['version', 'description']

[project.optional-dependencies]
dev = [
  "ruff",        # linting
  "pre-commit",  # linting
  "pip>=23.1.2", # needed for recursive dependencies
  "flit",        # needed to publish to pypi
  "twine",       # needed to publish to pypi
]
doc = [
  "quartodoc",
  "hydroflows[examples,extra]",       # examples are included in the docs
]
examples = [
  "jupyter",
  "matplotlib",
]
extra = [
  "graphviz",
]
io = [
]
test = [
  "pytest>=2.7.3",  # testing framework
  "pytest-cov",     # test coverage
  "pytest-mock",    # mocking
  "pytest-timeout", # darn hanging tests
  "pytest-lazy-fixtures",  # tet on multiple fixtures
  "xugrid",
]

full = ["hydroflows[io,extra,dev,test,doc,examples]"]
slim = ["hydroflows[io,extra,examples]"]

[project.urls]
Source = "https://github.com/Deltares-research/HydroFlows"

[tool.make_env]
channels = ["conda-forge"]
deps_not_in_conda = [
  "hydromt_fiat",
  "snakemake",
  "pulp",
  "pytest-lazy-fixtures",
  "quartodoc",
]

[project.scripts]
hydroflows = "hydroflows.cli.main:cli"

[tool.pytest.ini_options]
testpaths = [
    "test",
]

[tool.coverage.run]
branch = true
source = ["./hydroflows"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true

[tool.coverage.html]
directory = ".cov"

## Linting stuff
[tool.black]
line-length = 88
target-version = ['py311']

[tool.ruff]
line-length = 88

# enable pydocstyle (E), pyflake (F) and isort (I), pytest-style (PT)
select = ["E", "F", "I", "PT", "D"]
ignore-init-module-imports = true
ignore = ["B904", "D105", "D211", "D213", "D301", "E712", "E741"]
exclude = ["docs"]

[tool.ruff.per-file-ignores]
"tests/**" = ["D103", "D100", "D104"]
"tests/conftest.py" = ["E402"]
"hydroflows/__init__.py" = ["E402", "F401", "F403"]
"hydroflows/**/__init__.py" = ["F401", "F403"]
"hydroflows/templates/*.py" = ["D103", "D100", "D104", "D205", "D400", "F403"]

[tool.ruff.pydocstyle]
convention = "numpy"
