---
title: Development guide
---
Here we discuss how one can develop on HydroFlows.

## Rights
The [MIT license](https://github.com/Deltares-research/HydroFlows/blob/main/LICENSE) applies to all contributions.

## Philosophy
The idea behind HydroFlows.

## Setup
Multiple pieces of software are required to develop on HydroFlows.

A detailed guide on how to setup the development enviroment is provided [here](setup/index.qmd)

## Code Formatting
The code is formatted and linted using [pre-commit](https://pre-commit.com/).

Pre-commit uses a number of plugins to format and lint the code. A major
component of this is [Ruff](https://docs.astral.sh/ruff/).

Pre-commit can be manually run via:
```bash
pre-commit run -a
```

## Documentation
Our documentation is build with the help of the [quarto framework](https://quarto.org/).

Quarto uses markdown as it's syntax to write/ code the pages.
More information on how to work with this is found on [quarto's website](https://quarto.org/docs/guide/).

For HydroFlows, we use a couple of quarto extensions to enrich the functionality, these are:

- machow/quartodoc
- pandoc-ext/section-bibliographies
- quarto-ext/fontawesome
- quarto-ext/include-code-files

These are simply installed via running:

- `add_packages.ps1`; Windows
- `add_packages.sh`; Linux

from the 'docs' directory in the repository.

[Quartodoc](https://machow.github.io/quartodoc/get-started/overview.html), which is both a python package and a quarto extension
is used to generate the api of HydroFlows and the links to objects from other (build-in) packages of python.

While having the `hydroflows` environment activated (see [setup guide](setup/python.qmd)):
```bash
quartodoc interlinks
# and
python api.py
```

Where `api.py` is a script written around quartodoc to generate the api in a pretty fashion.

After this the docs can be generated:
```bash
quarto render
# or if there is code to be executed
quarto render --execute
```
